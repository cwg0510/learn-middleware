{"version":3,"sources":["modules/counter.js","components/Counter.js","containers/CounterContainer.js","components/Sample.js","lib/api.js","modules/loading.js","modules/sample.js","containers/SampleContainer.js","App.js","serviceWorker.js","modules/index.js","lib/loggerMiddleware.js","index.js"],"names":["increaseSaga","decreaseSaga","counterSaga","INCREASE_ASYNC","DECREASE_ASYNC","increase","createAction","decrease","increaseAsync","decreaseAsync","number","regenerator_default","a","wrap","_context","prev","next","delay","put","select","state","counter","sent","console","log","concat","stop","_marked","_context2","_marked2","_context3","throttle","takeLatest","_marked3","handleActions","_handleActions","Object","defineProperty","Counter","_ref","onIncrease","onDecrease","react_default","createElement","onClick","connect","components_Counter","Sample","post","users","loadingPost","loadingUsers","title","body","map","user","key","id","username","email","getPost","axios","get","getUsers","startLoading","finishLoading","loading","loading_handleActions","action","objectSpread","payload","getPostSaga","getUsersSaga","sampleSaga","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","GET_USERS","GET_USERS_SUCCESS","GET_USERS_FAILURE","call","api","type","data","t0","error","sample_marked","sample_marked2","sample_marked3","sample","sample_handleActions","useEffect","React","_ref2","components_Sample","App","containers_CounterContainer","containers_SampleContainer","Boolean","window","location","hostname","match","rootSaga","all","modules_marked","rootReducer","combineReducers","loggerMiddleware","store","group","getState","groupEnd","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b676d3b.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { delay, put, takeLatest, select, throttle } from 'redux-saga/effects';\n\nconst INCREASE = 'counter/INCREASE';\nconst DECREASE = 'counter/DECREASE';\nconst INCREASE_ASYNC = 'counter/INCREASE_ASYNC';\nconst DECREASE_ASYNC = 'counter/DECREASE_ASYNC';\n\nexport const increase = createAction(INCREASE);\nexport const decrease = createAction(DECREASE);\n// 마우스 클릭 이벤트가 payload 안에 들어가지 않도록 () => undefined 를 두번째 파라미터로 넣어줍니다.\nexport const increaseAsync = createAction(INCREASE_ASYNC, () => undefined);\nexport const decreaseAsync = createAction(DECREASE_ASYNC, () => undefined);\n\nfunction* increaseSaga() {\n  yield delay(1000); // 1초를 기다립니다.\n  yield put(increase()); // 특정 액션을 디스패치 합니다.\n  const number = yield select(state => state.counter);\n  console.log(`현재 값은 ${number}입니다.`);\n}\n\nfunction* decreaseSaga() {\n  yield delay(1000); // 1초를 기다립니다.\n  yield put(decrease()); // 특정 액션을 디스패치 합니다.\n}\n\nexport function* counterSaga() {\n  // takeEvery 는 들어오는 모든 액션에 대하여 특정 작업을 처리해줍니다.\n  // yield takeEvery(INCREASE_ASYNC, increaseSaga);\n  // 첫번째 파라미터: n초 * 1000\n  yield throttle(3000, INCREASE_ASYNC, increaseSaga);\n  // takeLatest 는 만약 기존에 진행중이던 작업이 있다면 취소처리 하고\n  // 가장 마지막으로 실행된 작업만을 수행합니다.\n  yield takeLatest(DECREASE_ASYNC, decreaseSaga);\n}\n\n// export const increaseAsync = () => dispatch => {\n//   setTimeout(() => {\n//     dispatch(increase());\n//   }, 1000);\n// };\n// export const decreaseAsync = () => dispatch => {\n//   setTimeout(() => {\n//     dispatch(decrease());\n//   }, 1000);\n// };\n\nconst initialState = 0; // 상태는 꼭 객체일 필요 없습니다. 숫자도 작동해요.\n\nconst counter = handleActions(\n  {\n    [INCREASE]: state => state + 1,\n    [DECREASE]: state => state - 1\n  },\n  initialState\n);\n\nexport default counter;\n","import React from 'react';\n\nconst Counter = ({ onIncrease, onDecrease, number }) => {\n  return (\n    <div>\n      <h1>{number}</h1>\n      <button onClick={onIncrease}>+1</button>\n      <button onClick={onDecrease}>-1</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { increaseAsync, decreaseAsync } from '../modules/counter';\nimport Counter from '../components/Counter';\n\nconst CounterContainer = ({ number, increaseAsync, decreaseAsync }) => {\n  return (\n    <Counter\n      number={number}\n      onIncrease={increaseAsync}\n      onDecrease={decreaseAsync}\n    />\n  );\n};\n\n// dispatch => ({\n//   increaseAsync : () =>dispatch(increaseAsync()),\n//   decreaseAsync : () => dispatch(decreaseAsnc())\n// })\n\nexport default connect(\n  state => ({\n    number: state.counter\n  }),\n  {\n    increaseAsync,\n    decreaseAsync\n  }\n)(CounterContainer);\n","import React from 'react';\n\nconst Sample = ({ post, users, loadingPost, loadingUsers }) => {\n  return (\n    <div>\n      <section>\n        <h1>포스트</h1>\n        {loadingPost && '로딩중...'}\n        {!loadingPost && post && (\n          <div>\n            <h3>{post.title}</h3>\n            <h3>{post.body}</h3>\n          </div>\n        )}\n      </section>\n      <hr />\n      <section>\n        <h1>사용자 목록</h1>\n        {loadingUsers && '로딩중...'}\n        {!loadingUsers && users && (\n          <ul>\n            {users.map(user => (\n              <li key={user.id}>\n                {user.username} ({user.email})\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default Sample;\n","import axios from 'axios';\n\nexport const getPost = id =>\n  axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n\nexport const getUsers = () =>\n  axios.get(`https://jsonplaceholder.typicode.com/users`);\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload 로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING\n);\n\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest } from 'redux-saga/effects';\nimport { call, put } from 'redux-saga/effects';\nimport * as api from '../lib/api';\nimport { startLoading, finishLoading } from '../modules/loading';\nimport createRequestSaga from '../lib/createRequestSaga';\n\n// 액션 타입들을 선언합니다.\nconst GET_POST = 'sample/GET_POST';\nconst GET_POST_SUCCESS = 'sample/GET_POST_SUCCESS';\nconst GET_POST_FAILURE = 'sample/GET_POST_FAILURE';\n\nconst GET_USERS = 'sample/GET_USERS';\nconst GET_USERS_SUCCESS = 'sample/GET_USERS_SUCCESS';\nconst GET_USERS_FAILURE = 'sample/GET_USERS_FAILURE';\n\nexport const getPost = createAction(GET_POST);\nexport const getUsers = createAction(GET_USERS);\n\n//  const getPostSaga = createRequestSaga(GET_POST, api.getPost);\n//  const getUsersSaga = createRequestSaga(GET_USERS, api.getUsers);\n\nfunction* getPostSaga(action) {\n  yield put(startLoading(GET_POST)); // 로딩 시작\n  // 파라미터로 action 을 받아오면 액션의 정보를 조회 할 수 있습니다.\n  try {\n    // call 을 사용하면 Promise 를 반환하는 함수를 호출하고, 기다릴 수 있습니다.\n    // 첫번째 파라미터는 함수, 나머지 파라미터는 해당 함수에 넣을 인수입니다.\n    const post = yield call(api.getPost, action.payload); // api.getPost(action.payload) 를 의미\n    yield put({\n      type: GET_POST_SUCCESS,\n      payload: post.data\n    });\n  } catch (e) {\n    // try/catch 문을 사용하여 에러도 잡을 수 있습니다.\n    yield put({\n      type: GET_POST_FAILURE,\n      payload: e,\n      error: true\n    });\n  }\n  yield put(finishLoading(GET_POST)); // 로딩 완료\n}\n\nfunction* getUsersSaga() {\n  yield put(startLoading(GET_USERS));\n  try {\n    const users = yield call(api.getUsers);\n    yield put({\n      type: GET_USERS_SUCCESS,\n      payload: users.data\n    });\n  } catch (e) {\n    yield put({\n      type: GET_USERS_FAILURE,\n      payload: e\n    });\n  }\n  yield put(finishLoading(GET_USERS));\n}\n\nexport function* sampleSaga() {\n  yield takeLatest(GET_POST, getPostSaga);\n  yield takeLatest(GET_USERS, getUsersSaga);\n}\n\n// 초기 상태를 선언합니다.\n// 요청의 로딩중 상태는 loading 이라는 객체에서 관리합니다.\n\nconst initialState = {\n  post: null,\n  users: null,\n  error : null\n};\n\nconst sample = handleActions(\n  {\n    [GET_POST_SUCCESS]: (state, action) => ({\n      ...state,\n      post: action.payload\n    }),\n    [GET_USERS_SUCCESS]: (state, action) => ({\n      ...state,\n      users: action.payload\n    }),\n    [GET_USERS_FAILURE]: (state, action) => ({\n      ...state,\n      error: action.payload\n    }),\n  },\n  initialState\n);\n\nexport default sample;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Sample from '../components/Sample';\nimport { getPost, getUsers } from '../modules/sample';\n\nconst { useEffect } = React;\nconst SampleContainer = ({\n  getPost,\n  getUsers,\n  post,\n  users,\n  loadingPost,\n  loadingUsers\n}) => {\n  // 클래스 형태 컴포넌트였더라면, componentDidMount\n  useEffect(() => {\n       getPost(1);\n       getUsers();\n    }, []);\n  return (\n    <Sample\n      post={post}\n      users={users}\n      loadingPost={loadingPost}\n      loadingUsers={loadingUsers}\n    />\n  );\n};\n\nexport default connect(\n  ({ sample, loading }) => ({\n    post: sample.post,\n    users: sample.users,\n    loadingPost: loading['sample/GET_POST'],\n    loadingUsers: loading['sample/GET_USERS']\n  }),\n  {\n    getPost,\n    getUsers\n  }\n)(SampleContainer);\n\n\n\n\n// {\n//   changeInput : (text) => {\n//     dispatch(changeInput(text));\n//   }\n\n\n// }","import React from 'react';\nimport CounterContainer from './containers/CounterContainer';\nimport SampleContainer from './containers/SampleContainer';\n\nconst App = () => {\n  return (\n    <div>\n      <CounterContainer />\n      <SampleContainer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport counter, { counterSaga } from './counter';\nimport sample, { sampleSaga } from './sample';\nimport loading from './loading';\n\nconst rootReducer = combineReducers({\n  counter,\n  sample,\n  loading\n});\n\nexport function* rootSaga() {\n  // all 함수는 여러 사가를 합쳐주는 역할을 합니다.\n  yield all([counterSaga(), sampleSaga()]);\n}\n\nexport default rootReducer;\n","const loggerMiddleware = store => next => action => {\n  console.group(action && action.type); // 액션 타입으로 log 를 그룹화함\n  console.log('이전 상태', store.getState());\n  console.log('액션', action);\n  next(action); // 다음 미들웨어 혹은 리듀서에게 전달\n  console.log('다음 상태', store.getState()); // 업데이트 된 상태\n  console.groupEnd(); // 그룹 끝\n};\n\nexport default loggerMiddleware;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer, { rootSaga } from './modules';\nimport loggerMiddleware from './lib/loggerMiddleware';\n//import { createLogger } from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n//const logger = createLogger();\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(loggerMiddleware, sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}